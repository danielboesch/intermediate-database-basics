
------------------------ PRACTICE JOINS -----------------------------


SELECT *
FROM invoice i
JOIN invoice_line il ON il.invoice_id = i.invoice_id
WHERE il.unit_price > 0.99;


SELECT i.invoice_date, c.first_name, c.last_name, i.total
FROM invoice i
JOIN customer c ON i.customer_id = c.customer_id;


SELECT c.first_name, c.last_name, e.first_name, e.last_name
FROM customer c
JOIN employee e ON c.support_rep_id = e.employee_id;


SELECT a.title , ar.name
FROM album a
JOIN artist ar ON a.artist_id = ar.artist_id;


SELECT pt.track_id
FROM playlist_track pt
JOIN playlist p ON p.playlist_id = pt.playlist_id
WHERE p.name = 'Music';


SELECT t.name
FROM track t
JOIN playlist_track pt ON t.track_id = pt.track_id
WHERE pt.playlist_id = 5;


SELECT t.name, p.name
FROM track t 
JOIN playlist_track pt ON t.track_id = pt.track_id
JOIN playlist p ON p.playlist_id = pt.playlist_id;


SELECT t.name, a.title
FROM track t 
JOIN genre g ON g.genre_id = t.genre_id
JOIN album a ON a.album_id = t.album_id
WHERE g.name = 'Alternative & Punk';

------------------------ PRACTICE NESTED QUERIES -----------------------------


SELECT *
FROM invoice
WHERE invoice_id IN (SELECT invoice_id FROM invoice_line WHERE unit_price > 0.99);


SELECT *
FROM playlist_track
WHERE playlist_id IN (SELECT playlist_id FROM playlist WHERE name = 'Music');


SELECT name
FROM track
WHERE track_id IN ( SELECT track_id FROM playlist_track WHERE playlist_id = 5);


SELECT *
FROM track
WHERE genre_id IN ( SELECT genre_id FROM genre WHERE name = 'Comedy');


SELECT *
FROM track
WHERE album_id IN ( SELECT album_id FROM album WHERE title = 'Fireball');


SELECT *
FROM track
WHERE album_id IN (SELECT album_id FROM album WHERE artist_id IN (SELECT artist_id FROM artist WHERE name = 'Queen'));


------------------------ PRACTICE UPDATING ROWS -----------------------------


UPDATE customer
SET fax = null
WHERE fax != null;  

UPDATE customer
SET company = 'Self'
WHERE company IS null;

UPDATE customer
SET last_name = 'Thompson'
WHERE first_name = 'Julia' AND last_name = 'Barnett';

UPDATE customer
SET support_rep_id = 4
WHERE email = 'luisrojas@yahoo.cl';

UPDATE track
SET composer = 'The darkness around us'
WHERE genre_id = 4;


------------------------ PRACTICE UPDATING ROWS -----------------------------


select count(t.name), g.name
from genre g
join track t ON t.genre_id = g.genre_id
group by g.name;

select count(*), g.genre_id
from genre g
join track t ON t.genre_id = g.genre_id
where g.genre_id = 1 OR g.genre_id = 9
group by g.genre_id;

select a.name, count(*)
from album al
join artist a ON a.artist_id = al.artist_id
group by a.name;


---------------------------- USE DISTINCT ----------------------------------


SELECT DISTINCT composer
FROM track;

SELECT DISTINCT billing_postal_code
FROM invoice;

SELECT DISTINCT company
FROM customer;


---------------------------- DELETE ROWS ----------------------------------

DELETE FROM practice_delete 
WHERE type = 'bronze';

DELETE FROM practice_delete 
WHERE type = 'silver';

DELETE FROM practice_delete 
WHERE value = 150 ;


----------------------------- E COMMERCE ----------------------------------


CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  name varchar(70),
  email varchar(70)
 );

 CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  name varchar(70),
  price INT
 );

 CREATE TABLE orders (
  order_id SERIAL PRIMARY KEY,
  product_order_id INT REFERENCES products(product_id)
 );

INSERT INTO users
(email, name)
VALUES
('daniel@gmail.com', 'daniel');

INSERT INTO users
(email, name)
VALUES
('jon@gmail.com', 'jon');

INSERT INTO users
(email, name)
VALUES
('dodie@gmail.com', 'dodie');

INSERT INTO products
(price, name)
VALUES
(70, 'Shoes');

INSERT INTO products
(price, name)
VALUES
(10000, 'Car');

INSERT INTO products
(price, name)
VALUES
(1500, 'Macbook');

INSERT INTO orders
(product_order_id)
VALUES
((SELECT product_id from products WHERE product_id = 1 ));

INSERT INTO orders
(product_order_id)
VALUES
((SELECT product_id from products WHERE product_id = 2 ));

INSERT INTO orders
(product_order_id)
VALUES
((SELECT product_id from products WHERE product_id = 3 ));

select * from orders
WHERE order_id = 1;

select * from orders;

select sum(p.price)
from orders o
join products p ON p.product_id = o.product_order_id
Where o.order_id = 3;